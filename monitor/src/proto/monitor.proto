syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/descriptor.proto";
package monitor;

service MonitorServer {
  rpc SendStats (stream InterfaceStats) returns (ReceiveReply) {}
}

service ReportServer {
  rpc SendReport (Report) returns (ReceiveReply) {}
}

message InterfaceStats{
  string hostname = 1;
  map<string, PortStats> port_stats = 2;
}

message PortStats{
    map<string, Data> data = 1;
}

message Data{
  oneof data {
    Rxe rxe = 1;
    Mlx mlx = 2;
  }
  PerSec per_sec = 3;
  Elapsed elapsed = 4;
}

message Elapsed {
  uint64 low = 1;
  uint64 high = 2;
}

message PerSec{
  double bytes_xmit_per_sec = 3;
  double packets_xmit_per_sec = 4;
  double bytes_rcv_per_sec = 5;
  double packets_rcv_per_sec = 6;
}

message Rxe{
  RxeCounter rxe_counter = 1;
  RxeHwCounter rxe_hw_counter = 2;
}

message RxeHwCounter{
  uint64 duplicate_request = 1;
  uint64 sent_pkts = 2;
  uint64 send_rnr_err = 3;
  uint64 send_err = 4;
  uint64 retry_rnr_exceeded_err = 5;
  uint64 retry_exceeded_err = 6;
  uint64 rdma_sends = 7;
  uint64 rdma_recvs = 8;
  uint64 rcvd_seq_err = 9;
  uint64 rcvd_rnr_err = 10;
  uint64 rcvd_pkts = 11;
  uint64 out_of_seq_request = 12;
  uint64 link_downed = 13;
  uint64 lifespan = 14;
  uint64 completer_retry_err = 15;
  uint64 ack_deferred = 16;
  uint64 port_xmit_data = 17;
}

message RxeCounter{
  uint64 rx_bytes = 1;
  uint64 tx_bytes = 2;
}

message Mlx{
  MlxCounter mlx_counter = 1;
  MlxHwCounter mlx_hw_counter = 2;
}

message MlxCounter{
  uint64 vl15_dropped = 1;
  uint64 excessive_buffer_overrun_errors = 2;
  uint64 link_downed = 3;
  uint64 link_error_recovery = 4;
  uint64 local_link_integrity_errors = 5;
  uint64 multicast_rcv_packets = 6;
  uint64 multicast_xmit_packets = 7;
  uint64 port_rcv_constraint_errors = 8;
  uint64 port_rcv_data = 9;
  uint64 port_rcv_errors = 10;
  uint64 port_rcv_packets = 11;
  uint64 port_rcv_remote_physical_errors = 12;
  uint64 port_rcv_switch_relay_errors = 13;
  uint64 port_xmit_constraint_errors = 14;
  uint64 port_xmit_data = 15;
  uint64 port_xmit_discards = 16;
  uint64 port_xmit_packets = 17;
  uint64 port_xmit_wait = 18;
  uint64 symbol_error = 19;
  uint64 unicast_rcv_packets = 20;
  uint64 unicast_xmit_packets = 21;
}

message MlxHwCounter {
  uint64 duplicate_request = 1;
  uint64 implied_nak_seq_err = 2;
  uint64 lifespan = 3;
  uint64 local_ack_timeout_err = 4;
  uint64 np_cnp_sent = 5;
  uint64 np_ecn_marked_roce_packets = 6;
  uint64 out_of_buffer = 7;
  uint64 out_of_sequence = 8;
  uint64 packet_seq_err = 9;
  uint64 req_cqe_error = 10;
  uint64 req_cqe_flush_error = 11;
  uint64 req_remote_access_errors = 12;
  uint64 req_remote_invalid_request = 13;
  uint64 resp_cqe_error = 14;
  uint64 resp_cqe_flush_error = 15;
  uint64 resp_local_length_error = 16;
  uint64 resp_remote_access_errors = 17;
  uint64 rnr_nak_retry_err = 18;
  uint64 roce_adp_retrans = 19;
  uint64 roce_adp_retrans_to = 20;
  uint64 roce_slow_restart = 21;
  uint64 roce_slow_restart_cnps = 22;
  uint64 roce_slow_restart_trans = 23;
  uint64 rp_cnp_handled = 24;
  uint64 rp_cnp_ignored = 25;
  uint64 rx_atomic_requests = 26;
  uint64 rx_icrc_encapsulated = 27;
  uint64 rx_read_requests = 28;
  uint64 rx_write_requests = 29;
}

message ReceiveReply {
    string message = 1;
}

message Report{
  string hostname = 1;
  string uuid = 2;
  TestInfo test_info = 4;
  BwResults bw_results = 5;
}

message BwResults{
  uint32 msg_size = 1;
  uint32 n_iterations = 2;
  double bw_peak = 3;
  double bw_average = 4;
  double msg_rate = 5;
}

message TestInfo{
  string test = 1;
  string dual_port = 2;
  string device = 3;
  uint32 number_of_qps = 4;
  string transport_type = 5;
  string connection_type = 6;
  string using_srq = 7;
  string pci_relax_order = 8;
  string ibv_wr_api = 9;
  optional uint32 tx_depth = 10;
  optional uint32 rx_depth = 11;
  uint32 cq_moderation = 12;
  uint32 mtu = 13;
  string link_type = 14;
  uint32 gid_index = 15;
  uint32 max_inline_data = 16;
  string rdma_cm_qps = 17;
  string data_ex_method = 18;
}