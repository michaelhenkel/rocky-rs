syntax = "proto3";
import "google/protobuf/empty.proto";
package connection_manager;

service ServerConnection {
  rpc Server (Request) returns (ServerReply) {}
}

service InitiatorConnection {
  rpc Initiator (Request) returns (InitiatorReply) {}
}

service StatsManager {
  rpc GetReport (ReportRequest) returns (ReportReply) {}
  rpc ListReport (google.protobuf.Empty) returns (ReportList) {}
  rpc DeleteReport (ReportRequest) returns (google.protobuf.Empty) {}
}

service Monitor{
  rpc MonitorStream (CounterFilter) returns (stream InterfaceCounter) {}
}

message InterfaceCounter{
  string name = 1;
  map<uint32, MonitorCounters> counters = 2;
}

message MonitorCounters{
  HwCounter hw_counter = 1;
  PortCounter port_counter = 2;
}

message PortCounter{
  uint64 unicast_xmit_packets = 1;
  uint64 unicast_rcv_packets = 2;
  uint64 port_xmit_wait = 3;
  uint64 port_xmit_packets = 4;
  uint64 port_xmit_data = 5;
  uint64 port_rcv_packets = 6;
  uint64 port_rcv_errors = 7;
  uint64 port_rcv_data = 8;
  uint64 multicast_xmit_packets = 9;
  uint64 multicast_rcv_packets = 10;

}

message HwCounter{
  uint64 rx_write_requests = 1;
  uint64 rx_read_requests = 2;
  uint64 rx_atomic_requests = 3;
  uint64 resp_cqe_errors = 4;
  uint64 req_cqe_errors = 5;
  uint64 resp_cqe_fl = 6;
  uint64 out_of_sequence = 7;
  uint64 out_of_buffer = 8;
  uint64 local_ack_timeout_errors = 9;
  uint64 implied_nak_seq_errors = 10;
  uint64 duplicate_request = 11;
}

message CounterFilter{
  optional string interface = 1;
  optional uint32 port = 2;
  repeated string counter_list = 3; 
}

message ServerReply {
  uint32 port = 1;
}

message Request {
  optional string uuid = 1;
  string server_address = 2;
  uint32 server_port = 3;
  optional uint32 iterations = 4;
  optional uint64 message_size = 5;
  optional Mtu mtu = 6;
  Operation operation = 7;
  Mode mode = 8;
  bool cm = 9;
}

enum Mtu {
  MTU_512 = 0;
  MTU_1024 = 1;
  MTU_2048 = 2;
  MTU_4096 = 3;
}

message InitiatorReply {
  string uuid = 1;
}

enum Operation {
  SEND = 0;
  WRITE = 1;
  READ = 2;
  ATOMIC = 3;
}

enum Mode {
  BW = 0;
  LAT = 1;
}

message ReportRequest {
  string uuid = 1;
  string suffix = 2;
}

message ReportReply{
  optional Report report = 1;
}

message Report{
  TestInfo test_info = 1;
  BwResults bw_results = 2;
}

message ReportList{
  map<string, Report> reports = 1;
}

message BwResults{
  uint32 msg_size = 1;
  uint32 n_iterations = 2;
  double bw_peak = 3;
  double bw_average = 4;
  double msg_rate = 5;
}

message TestInfo{
  string test = 1;
  string dual_port = 2;
  string device = 3;
  uint32 number_of_qps = 4;
  string transport_type = 5;
  string connection_type = 6;
  string using_srq = 7;
  string pci_relax_order = 8;
  string ibv_wr_api = 9;
  optional uint32 tx_depth = 10;
  optional uint32 rx_depth = 11;
  uint32 cq_moderation = 12;
  uint32 mtu = 13;
  string link_type = 14;
  uint32 gid_index = 15;
  uint32 max_inline_data = 16;
  string rdma_cm_qps = 17;
  string data_ex_method = 18;
}